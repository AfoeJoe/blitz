// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           ROLE     @default(user)

  tokens   Token[]
  sessions Session[]
  // Profile  Profile[]
  Attempts Attempts[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

model Project {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
}

// post is qusestion
model Questions {
  id            Int      @id @default(autoincrement())
  question      String
  options       String[]
  correctAnswer Int
  hintText      String?
  photoUrl      String?
  subject       SUBJECT?

  QuestionsMeta QuestionsMeta[]

  @@index([subject])
}

model QuestionsMeta {
  id        Int       @id @default(autoincrement())
  year      DateTime?
  exam      EXAM      @default(undertermined)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  published Boolean   @default(true)

  totalAppearances Int?      @default(0)
  average          Int?      @default(0)
  question         Questions @relation(fields: [questionsId], references: [id])
  questionsId      Int

  @@index([average])
}

// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
//   role   Role    @default(USER)

// }

model Attempts {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  result      Int //977 === 97.7%
  questionId  Int[]
  userAnswers Int[]
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
}

enum EXAM {
  waec
  jamb
  undertermined
}

enum SUBJECT {
  english
  maths
  biology
  physics
  chemistry
}

enum ROLE {
  admin
  user
}
